<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2024 on fletchers-cloud-blog</title>
    <link>http://localhost:1313/posts/2024/</link>
    <description>Recent content in 2024 on fletchers-cloud-blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Aug 2024 16:00:56 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/2024/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using the AZ Rest CLI command</title>
      <link>http://localhost:1313/posts/2024/using-the-az-rest-cli-command/</link>
      <pubDate>Thu, 29 Aug 2024 16:00:56 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/using-the-az-rest-cli-command/</guid>
      <description>&lt;p&gt;What are we doing?&lt;/p&gt;&#xA;&lt;p&gt;With this post I am going to show you how you can easily do Azure API calls and “skip” a lot of the difficult items. I have been on something interesting tools to help my customers, when I can talk more about it, I will. As part of this tooling exercise, the Azure REST API is used extensively. With “normal” applications like APIDog, ThunderClient and the like, you often need to get a token and then add this to the header as an auth object and this involves configuration on EntraID and the like. This is not necessarily the best approach for what I was looking for. I was looking for a quick testing framework for Azure REST API calls and then look at the output to be further extracted / manipulated with JQ.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
